#include <stdio.h>

#define INT32_MAX 2147483647	// 0x7FFFFFFF
#define INT32_MIN -2147483648	// 0x80000000 ( = -0x80000000 )

// register map at address 0x70000000
uint32_t *regmap = (uint32_t *) 0x70000000;


// fully checks a single addition/subtraction operation
void check_adder(int a, int b, int k);
void print(int a,int b,int k,int s,int c);


int main()
{
	printf("\n================================\nBEGINNING TESTS:\n");

	// ================ corner cases
	check_adder(INT32_MAX,0,0);				// MAX + 0 = MAX, carry = 0
	check_adder(INT32_MAX,1,0);				// MAX + 1 = MIN, carry = 1
	check_adder(INT32_MIN,0,0);				// MIN + 0 = MIN, carry = 0
	check_adder(INT32_MIN,-1,0);			// MIN + -1 = MAX, carry = 1

	check_adder(INT32_MAX,0,1);				// MAX - 0 = MAX, carry = 1
	check_adder(INT32_MAX,-1,1);			// MAX - -1 = MIN, carry = 0
	check_adder(INT32_MIN,0,1);				// MIN - 0 = MIN, carry = 1
	check_adder(INT32_MIN,1,1);				// MIN - 1 = MAX, carry = 0

	// ================ random cases


	printf("\nTESTS COMPLETE\n");
	return 0;
}

void check_adder(int a, int b, int k)
{
	int success;

	// ================ obtain adder result
	regmap[0] = a;
	regmap[1] = b;
	regmap[3] = k;
	int result = regmap[0];
	int carry = regmap[3];
	int borrow = !carry;

	// ================ checks
	if(k == 0){						// addition case
		if(a+b == result)
			success = carry == 0;
		else
			success = carry == 1;
	}else{							// subtraction case
		if(a-b == result)
			success = borrow == 0;
		else
			success = borrow == 1;
	}

	if(success==0){
		printf("\nFAILURE:\n");
		print(a,b,k,result,carry);
	}
}

void print(int a, int b, int k, int s, int c)
{
	if(k == 0)
		printf("%d + %d\t= %d\ncout\t\t= %d\n",a,b,s,c);
	else
		printf("%d - %d\t= %d\ncout\t\t= %d\n",a,b,s,!c);
}





